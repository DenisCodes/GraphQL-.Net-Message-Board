schema {
  query: Query
  mutation: Mutation
}

type Query {
  users("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UserFilterInput order: [UserSortInput!]): UsersConnection
  allUsers: [User]
  user(id: Int!): User
  posts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PostFilterInput order: [PostSortInput!]): PostsConnection
  allPosts: [Post]
  post(id: Int!): Post
  comments("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CommentFilterInput order: [CommentSortInput!]): CommentsConnection
  allComments: [Comment]
  comment(id: Int!): Comment
}

type Mutation {
  addUser(first: String last: String email: String): User
  updateUser(id: Int! first: String last: String email: String): User!
  deleteUser(id: Int!): User
  addPost(title: String headerImage: String content: String userId: Int!): Post
  updatePost(id: Int! title: String headerImage: String content: String): Post!
  deletePost(id: Int!): Post
  addComment(message: String userId: Int! postId: Int!): Comment
  updateComment(id: Int! message: String): Comment
  deleteComment(id: Int!): Comment
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: ComparableInt32OperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  email: StringOperationFilterInput
  createdDateTime: ComparableDateTimeOperationFilterInput
  lastEdited: ComparableNullableOfDateTimeOperationFilterInput
}

input UserSortInput {
  id: SortEnumType
  firstName: SortEnumType
  lastName: SortEnumType
  email: SortEnumType
  createdDateTime: SortEnumType
  lastEdited: SortEnumType
}

input PostFilterInput {
  and: [PostFilterInput!]
  or: [PostFilterInput!]
  id: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  headerImage: StringOperationFilterInput
  content: StringOperationFilterInput
  createdDateTime: ComparableDateTimeOperationFilterInput
  lastEdited: ComparableDateTimeOperationFilterInput
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
}

input PostSortInput {
  id: SortEnumType
  title: SortEnumType
  headerImage: SortEnumType
  content: SortEnumType
  createdDateTime: SortEnumType
  lastEdited: SortEnumType
  userId: SortEnumType
  user: UserSortInput
}

input CommentFilterInput {
  and: [CommentFilterInput!]
  or: [CommentFilterInput!]
  id: ComparableInt32OperationFilterInput
  message: StringOperationFilterInput
  createdDateTime: ComparableDateTimeOperationFilterInput
  lastEdited: ComparableDateTimeOperationFilterInput
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  postId: ComparableInt32OperationFilterInput
  post: PostFilterInput
}

input CommentSortInput {
  id: SortEnumType
  message: SortEnumType
  createdDateTime: SortEnumType
  lastEdited: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  postId: SortEnumType
  post: PostSortInput
}

"A connection to a list of items."
type UsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [User]
}

"A connection to a list of items."
type PostsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PostsEdge!]
  "A flattened list of the nodes."
  nodes: [Post]
}

"A connection to a list of items."
type CommentsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CommentsEdge!]
  "A flattened list of the nodes."
  nodes: [Comment]
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type User {
  id: Int!
  firstName: String
  lastName: String
  email: String
  createdDateTime: DateTime!
  lastEdited: DateTime
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}

type Post {
  id: Int!
  title: String!
  headerImage: String
  content: String!
  createdDateTime: DateTime!
  lastEdited: DateTime!
  userId: Int!
  user: User!
}

"An edge in a connection."
type PostsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Post
}

type Comment {
  id: Int!
  message: String
  createdDateTime: DateTime!
  lastEdited: DateTime!
  userId: Int!
  user: User!
  postId: Int!
  post: Post!
}

"An edge in a connection."
type CommentsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Comment
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime
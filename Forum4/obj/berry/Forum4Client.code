[{"Name":"Forum4Client","SourceText":"// <auto-generated/>\r\n#nullable enable\r\n\r\nnamespace Forum4Server\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPostsResult : global::System.IEquatable<GetAllPostsResult>, IGetAllPostsResult\r\n    {\r\n        public GetAllPostsResult(global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllPosts_AllPosts?>? allPosts)\r\n        {\r\n            AllPosts = allPosts;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllPosts_AllPosts?>? AllPosts { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetAllPostsResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AllPosts, other.AllPosts));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetAllPostsResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (AllPosts != null)\r\n                {\r\n                    foreach (var AllPosts_elm in AllPosts)\r\n                    {\r\n                        if (AllPosts_elm != null)\r\n                        {\r\n                            hash ^= 397 * AllPosts_elm.GetHashCode();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPosts_AllPosts_Post : global::System.IEquatable<GetAllPosts_AllPosts_Post>, IGetAllPosts_AllPosts_Post\r\n    {\r\n        public GetAllPosts_AllPosts_Post(global::System.String title, global::System.String content, global::System.DateTimeOffset createdDateTime, global::System.Int32 userId, global::System.Int32 id)\r\n        {\r\n            Title = title;\r\n            Content = content;\r\n            CreatedDateTime = createdDateTime;\r\n            UserId = userId;\r\n            Id = id;\r\n        }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.String Content { get; }\r\n\r\n        public global::System.DateTimeOffset CreatedDateTime { get; }\r\n\r\n        public global::System.Int32 UserId { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetAllPosts_AllPosts_Post? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Title.Equals(other.Title)) && Content.Equals(other.Content) && CreatedDateTime.Equals(other.CreatedDateTime) && UserId == other.UserId && Id == other.Id;\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetAllPosts_AllPosts_Post)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Title.GetHashCode();\r\n                hash ^= 397 * Content.GetHashCode();\r\n                hash ^= 397 * CreatedDateTime.GetHashCode();\r\n                hash ^= 397 * UserId.GetHashCode();\r\n                hash ^= 397 * Id.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllPostsResult\r\n    {\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllPosts_AllPosts?>? AllPosts { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllPosts_AllPosts\r\n    {\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.String Content { get; }\r\n\r\n        public global::System.DateTimeOffset CreatedDateTime { get; }\r\n\r\n        public global::System.Int32 UserId { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllPosts_AllPosts_Post : IGetAllPosts_AllPosts\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllCommentsResult : global::System.IEquatable<GetAllCommentsResult>, IGetAllCommentsResult\r\n    {\r\n        public GetAllCommentsResult(global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllComments_AllComments?>? allComments)\r\n        {\r\n            AllComments = allComments;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllComments_AllComments?>? AllComments { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetAllCommentsResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AllComments, other.AllComments));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetAllCommentsResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (AllComments != null)\r\n                {\r\n                    foreach (var AllComments_elm in AllComments)\r\n                    {\r\n                        if (AllComments_elm != null)\r\n                        {\r\n                            hash ^= 397 * AllComments_elm.GetHashCode();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllComments_AllComments_Comment : global::System.IEquatable<GetAllComments_AllComments_Comment>, IGetAllComments_AllComments_Comment\r\n    {\r\n        public GetAllComments_AllComments_Comment(global::System.String? message, global::System.DateTimeOffset createdDateTime, global::System.Int32 userId, global::System.Int32 postId, global::System.Int32 id)\r\n        {\r\n            Message = message;\r\n            CreatedDateTime = createdDateTime;\r\n            UserId = userId;\r\n            PostId = postId;\r\n            Id = id;\r\n        }\r\n\r\n        public global::System.String? Message { get; }\r\n\r\n        public global::System.DateTimeOffset CreatedDateTime { get; }\r\n\r\n        public global::System.Int32 UserId { get; }\r\n\r\n        public global::System.Int32 PostId { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetAllComments_AllComments_Comment? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (((Message is null && other.Message is null) || Message != null && Message.Equals(other.Message))) && CreatedDateTime.Equals(other.CreatedDateTime) && UserId == other.UserId && PostId == other.PostId && Id == other.Id;\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetAllComments_AllComments_Comment)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (Message != null)\r\n                {\r\n                    hash ^= 397 * Message.GetHashCode();\r\n                }\r\n\r\n                hash ^= 397 * CreatedDateTime.GetHashCode();\r\n                hash ^= 397 * UserId.GetHashCode();\r\n                hash ^= 397 * PostId.GetHashCode();\r\n                hash ^= 397 * Id.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllCommentsResult\r\n    {\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllComments_AllComments?>? AllComments { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllComments_AllComments\r\n    {\r\n        public global::System.String? Message { get; }\r\n\r\n        public global::System.DateTimeOffset CreatedDateTime { get; }\r\n\r\n        public global::System.Int32 UserId { get; }\r\n\r\n        public global::System.Int32 PostId { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllComments_AllComments_Comment : IGetAllComments_AllComments\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsersResult : global::System.IEquatable<GetAllUsersResult>, IGetAllUsersResult\r\n    {\r\n        public GetAllUsersResult(global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllUsers_AllUsers?>? allUsers)\r\n        {\r\n            AllUsers = allUsers;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllUsers_AllUsers?>? AllUsers { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetAllUsersResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AllUsers, other.AllUsers));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetAllUsersResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (AllUsers != null)\r\n                {\r\n                    foreach (var AllUsers_elm in AllUsers)\r\n                    {\r\n                        if (AllUsers_elm != null)\r\n                        {\r\n                            hash ^= 397 * AllUsers_elm.GetHashCode();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsers_AllUsers_User : global::System.IEquatable<GetAllUsers_AllUsers_User>, IGetAllUsers_AllUsers_User\r\n    {\r\n        public GetAllUsers_AllUsers_User(global::System.String? firstName, global::System.String? lastName, global::System.Int32 id)\r\n        {\r\n            FirstName = firstName;\r\n            LastName = lastName;\r\n            Id = id;\r\n        }\r\n\r\n        public global::System.String? FirstName { get; }\r\n\r\n        public global::System.String? LastName { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetAllUsers_AllUsers_User? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName))) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && Id == other.Id;\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetAllUsers_AllUsers_User)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (FirstName != null)\r\n                {\r\n                    hash ^= 397 * FirstName.GetHashCode();\r\n                }\r\n\r\n                if (LastName != null)\r\n                {\r\n                    hash ^= 397 * LastName.GetHashCode();\r\n                }\r\n\r\n                hash ^= 397 * Id.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllUsersResult\r\n    {\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllUsers_AllUsers?>? AllUsers { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllUsers_AllUsers\r\n    {\r\n        public global::System.String? FirstName { get; }\r\n\r\n        public global::System.String? LastName { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllUsers_AllUsers_User : IGetAllUsers_AllUsers\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllPosts GraphQL operation\r\n    /// <code>\r\n    /// query GetAllPosts {\r\n    ///   allPosts {\r\n    ///     __typename\r\n    ///     title\r\n    ///     content\r\n    ///     createdDateTime\r\n    ///     userId\r\n    ///     id\r\n    ///     ... on Post {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPostsQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetAllPostsQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetAllPostsQueryDocument Instance { get; } = new GetAllPostsQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"404a2abd2b00b13f625c2aebf6e722c6\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllPosts GraphQL operation\r\n    /// <code>\r\n    /// query GetAllPosts {\r\n    ///   allPosts {\r\n    ///     __typename\r\n    ///     title\r\n    ///     content\r\n    ///     createdDateTime\r\n    ///     userId\r\n    ///     id\r\n    ///     ... on Post {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPostsQuery : global::Forum4Server.IGetAllPostsQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetAllPostsResult> _operationExecutor;\r\n        public GetAllPostsQuery(global::StrawberryShake.IOperationExecutor<IGetAllPostsResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllPostsResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPostsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPostsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetAllPostsQueryDocument.Instance.Hash.Value, name: \"GetAllPosts\", document: GetAllPostsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllPosts GraphQL operation\r\n    /// <code>\r\n    /// query GetAllPosts {\r\n    ///   allPosts {\r\n    ///     __typename\r\n    ///     title\r\n    ///     content\r\n    ///     createdDateTime\r\n    ///     userId\r\n    ///     id\r\n    ///     ... on Post {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllPostsQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPostsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPostsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllComments GraphQL operation\r\n    /// <code>\r\n    /// query GetAllComments {\r\n    ///   allComments {\r\n    ///     __typename\r\n    ///     message\r\n    ///     createdDateTime\r\n    ///     userId\r\n    ///     postId\r\n    ///     id\r\n    ///     ... on Comment {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllCommentsQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetAllCommentsQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetAllCommentsQueryDocument Instance { get; } = new GetAllCommentsQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"c71dcf0aa36ba5f3fba4f6f9bd981dff\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllComments GraphQL operation\r\n    /// <code>\r\n    /// query GetAllComments {\r\n    ///   allComments {\r\n    ///     __typename\r\n    ///     message\r\n    ///     createdDateTime\r\n    ///     userId\r\n    ///     postId\r\n    ///     id\r\n    ///     ... on Comment {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllCommentsQuery : global::Forum4Server.IGetAllCommentsQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetAllCommentsResult> _operationExecutor;\r\n        public GetAllCommentsQuery(global::StrawberryShake.IOperationExecutor<IGetAllCommentsResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllCommentsResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllCommentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllCommentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetAllCommentsQueryDocument.Instance.Hash.Value, name: \"GetAllComments\", document: GetAllCommentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllComments GraphQL operation\r\n    /// <code>\r\n    /// query GetAllComments {\r\n    ///   allComments {\r\n    ///     __typename\r\n    ///     message\r\n    ///     createdDateTime\r\n    ///     userId\r\n    ///     postId\r\n    ///     id\r\n    ///     ... on Comment {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllCommentsQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllCommentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllCommentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllUsers GraphQL operation\r\n    /// <code>\r\n    /// query GetAllUsers {\r\n    ///   allUsers {\r\n    ///     __typename\r\n    ///     firstName\r\n    ///     lastName\r\n    ///     id\r\n    ///     ... on User {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsersQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetAllUsersQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetAllUsersQueryDocument Instance { get; } = new GetAllUsersQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"ef96b72841199c953f61ca3f23142677\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\r\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllUsers GraphQL operation\r\n    /// <code>\r\n    /// query GetAllUsers {\r\n    ///   allUsers {\r\n    ///     __typename\r\n    ///     firstName\r\n    ///     lastName\r\n    ///     id\r\n    ///     ... on User {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsersQuery : global::Forum4Server.IGetAllUsersQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetAllUsersResult> _operationExecutor;\r\n        public GetAllUsersQuery(global::StrawberryShake.IOperationExecutor<IGetAllUsersResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllUsersResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetAllUsersQueryDocument.Instance.Hash.Value, name: \"GetAllUsers\", document: GetAllUsersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the operation service of the GetAllUsers GraphQL operation\r\n    /// <code>\r\n    /// query GetAllUsers {\r\n    ///   allUsers {\r\n    ///     __typename\r\n    ///     firstName\r\n    ///     lastName\r\n    ///     id\r\n    ///     ... on User {\r\n    ///       id\r\n    ///     }\r\n    ///   }\r\n    /// }\r\n    /// </code>\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IGetAllUsersQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the Forum4Client GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class Forum4Client : global::Forum4Server.IForum4Client\r\n    {\r\n        private readonly global::Forum4Server.IGetAllPostsQuery _getAllPosts;\r\n        private readonly global::Forum4Server.IGetAllCommentsQuery _getAllComments;\r\n        private readonly global::Forum4Server.IGetAllUsersQuery _getAllUsers;\r\n        public Forum4Client(global::Forum4Server.IGetAllPostsQuery getAllPosts, global::Forum4Server.IGetAllCommentsQuery getAllComments, global::Forum4Server.IGetAllUsersQuery getAllUsers)\r\n        {\r\n            _getAllPosts = getAllPosts ?? throw new global::System.ArgumentNullException(nameof(getAllPosts));\r\n            _getAllComments = getAllComments ?? throw new global::System.ArgumentNullException(nameof(getAllComments));\r\n            _getAllUsers = getAllUsers ?? throw new global::System.ArgumentNullException(nameof(getAllUsers));\r\n        }\r\n\r\n        public static global::System.String ClientName => \"Forum4Client\";\r\n        public global::Forum4Server.IGetAllPostsQuery GetAllPosts => _getAllPosts;\r\n        public global::Forum4Server.IGetAllCommentsQuery GetAllComments => _getAllComments;\r\n        public global::Forum4Server.IGetAllUsersQuery GetAllUsers => _getAllUsers;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents the Forum4Client GraphQL client\r\n    /// </summary>\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial interface IForum4Client\r\n    {\r\n        global::Forum4Server.IGetAllPostsQuery GetAllPosts { get; }\r\n\r\n        global::Forum4Server.IGetAllCommentsQuery GetAllComments { get; }\r\n\r\n        global::Forum4Server.IGetAllUsersQuery GetAllUsers { get; }\r\n    }\r\n}\r\n\r\nnamespace Forum4Server.State\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class PostEntity\r\n    {\r\n        public PostEntity(global::System.String title = default !, global::System.String content = default !, global::System.DateTimeOffset createdDateTime = default !, global::System.Int32 userId = default !, global::System.Int32 id = default !)\r\n        {\r\n            Title = title;\r\n            Content = content;\r\n            CreatedDateTime = createdDateTime;\r\n            UserId = userId;\r\n            Id = id;\r\n        }\r\n\r\n        public global::System.String Title { get; }\r\n\r\n        public global::System.String Content { get; }\r\n\r\n        public global::System.DateTimeOffset CreatedDateTime { get; }\r\n\r\n        public global::System.Int32 UserId { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class CommentEntity\r\n    {\r\n        public CommentEntity(global::System.String? message = default !, global::System.DateTimeOffset createdDateTime = default !, global::System.Int32 userId = default !, global::System.Int32 postId = default !, global::System.Int32 id = default !)\r\n        {\r\n            Message = message;\r\n            CreatedDateTime = createdDateTime;\r\n            UserId = userId;\r\n            PostId = postId;\r\n            Id = id;\r\n        }\r\n\r\n        public global::System.String? Message { get; }\r\n\r\n        public global::System.DateTimeOffset CreatedDateTime { get; }\r\n\r\n        public global::System.Int32 UserId { get; }\r\n\r\n        public global::System.Int32 PostId { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class UserEntity\r\n    {\r\n        public UserEntity(global::System.String? firstName = default !, global::System.String? lastName = default !, global::System.Int32 id = default !)\r\n        {\r\n            FirstName = firstName;\r\n            LastName = lastName;\r\n            Id = id;\r\n        }\r\n\r\n        public global::System.String? FirstName { get; }\r\n\r\n        public global::System.String? LastName { get; }\r\n\r\n        public global::System.Int32 Id { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPostsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.GetAllPostsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Forum4Server.State.PostEntity, GetAllPosts_AllPosts_Post> _getAllPosts_AllPosts_PostFromPostEntityMapper;\r\n        public GetAllPostsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Forum4Server.State.PostEntity, GetAllPosts_AllPosts_Post> getAllPosts_AllPosts_PostFromPostEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getAllPosts_AllPosts_PostFromPostEntityMapper = getAllPosts_AllPosts_PostFromPostEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAllPosts_AllPosts_PostFromPostEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Forum4Server.IGetAllPostsResult);\r\n        public GetAllPostsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetAllPostsResultInfo info)\r\n            {\r\n                return new GetAllPostsResult(MapIGetAllPosts_AllPostsArray(info.AllPosts, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetAllPostsResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllPosts_AllPosts?>? MapIGetAllPosts_AllPostsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var posts = new global::System.Collections.Generic.List<global::Forum4Server.IGetAllPosts_AllPosts?>();\r\n            foreach (global::StrawberryShake.EntityId? child in list)\r\n            {\r\n                posts.Add(MapIGetAllPosts_AllPosts(child, snapshot));\r\n            }\r\n\r\n            return posts;\r\n        }\r\n\r\n        private global::Forum4Server.IGetAllPosts_AllPosts? MapIGetAllPosts_AllPosts(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (entityId.Value.Name.Equals(\"Post\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getAllPosts_AllPosts_PostFromPostEntityMapper.Map(snapshot.GetEntity<global::Forum4Server.State.PostEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPostsResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetAllPostsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allPosts, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            AllPosts = allPosts;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? AllPosts { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetAllPostsResultInfo(AllPosts, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPosts_AllPosts_PostFromPostEntityMapper : global::StrawberryShake.IEntityMapper<global::Forum4Server.State.PostEntity, GetAllPosts_AllPosts_Post>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetAllPosts_AllPosts_PostFromPostEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetAllPosts_AllPosts_Post Map(global::Forum4Server.State.PostEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetAllPosts_AllPosts_Post(entity.Title, entity.Content, entity.CreatedDateTime, entity.UserId, entity.Id);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllCommentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.GetAllCommentsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Forum4Server.State.CommentEntity, GetAllComments_AllComments_Comment> _getAllComments_AllComments_CommentFromCommentEntityMapper;\r\n        public GetAllCommentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Forum4Server.State.CommentEntity, GetAllComments_AllComments_Comment> getAllComments_AllComments_CommentFromCommentEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getAllComments_AllComments_CommentFromCommentEntityMapper = getAllComments_AllComments_CommentFromCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAllComments_AllComments_CommentFromCommentEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Forum4Server.IGetAllCommentsResult);\r\n        public GetAllCommentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetAllCommentsResultInfo info)\r\n            {\r\n                return new GetAllCommentsResult(MapIGetAllComments_AllCommentsArray(info.AllComments, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetAllCommentsResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllComments_AllComments?>? MapIGetAllComments_AllCommentsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var comments = new global::System.Collections.Generic.List<global::Forum4Server.IGetAllComments_AllComments?>();\r\n            foreach (global::StrawberryShake.EntityId? child in list)\r\n            {\r\n                comments.Add(MapIGetAllComments_AllComments(child, snapshot));\r\n            }\r\n\r\n            return comments;\r\n        }\r\n\r\n        private global::Forum4Server.IGetAllComments_AllComments? MapIGetAllComments_AllComments(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (entityId.Value.Name.Equals(\"Comment\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getAllComments_AllComments_CommentFromCommentEntityMapper.Map(snapshot.GetEntity<global::Forum4Server.State.CommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllCommentsResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetAllCommentsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allComments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            AllComments = allComments;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? AllComments { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetAllCommentsResultInfo(AllComments, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllComments_AllComments_CommentFromCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::Forum4Server.State.CommentEntity, GetAllComments_AllComments_Comment>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetAllComments_AllComments_CommentFromCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetAllComments_AllComments_Comment Map(global::Forum4Server.State.CommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetAllComments_AllComments_Comment(entity.Message, entity.CreatedDateTime, entity.UserId, entity.PostId, entity.Id);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.GetAllUsersResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Forum4Server.State.UserEntity, GetAllUsers_AllUsers_User> _getAllUsers_AllUsers_UserFromUserEntityMapper;\r\n        public GetAllUsersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Forum4Server.State.UserEntity, GetAllUsers_AllUsers_User> getAllUsers_AllUsers_UserFromUserEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getAllUsers_AllUsers_UserFromUserEntityMapper = getAllUsers_AllUsers_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAllUsers_AllUsers_UserFromUserEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Forum4Server.IGetAllUsersResult);\r\n        public GetAllUsersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetAllUsersResultInfo info)\r\n            {\r\n                return new GetAllUsersResult(MapIGetAllUsers_AllUsersArray(info.AllUsers, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetAllUsersResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::Forum4Server.IGetAllUsers_AllUsers?>? MapIGetAllUsers_AllUsersArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var users = new global::System.Collections.Generic.List<global::Forum4Server.IGetAllUsers_AllUsers?>();\r\n            foreach (global::StrawberryShake.EntityId? child in list)\r\n            {\r\n                users.Add(MapIGetAllUsers_AllUsers(child, snapshot));\r\n            }\r\n\r\n            return users;\r\n        }\r\n\r\n        private global::Forum4Server.IGetAllUsers_AllUsers? MapIGetAllUsers_AllUsers(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (entityId.Value.Name.Equals(\"User\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getAllUsers_AllUsers_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::Forum4Server.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsersResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetAllUsersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allUsers, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            AllUsers = allUsers;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? AllUsers { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetAllUsersResultInfo(AllUsers, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsers_AllUsers_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::Forum4Server.State.UserEntity, GetAllUsers_AllUsers_User>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetAllUsers_AllUsers_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetAllUsers_AllUsers_User Map(global::Forum4Server.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetAllUsers_AllUsers_User(entity.FirstName, entity.LastName, entity.Id);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllPostsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllPostsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllPostsResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        public GetAllPostsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllPostsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>(\"DateTime\") ?? throw new global::System.ArgumentException(\"No serializer for type `DateTime` found.\");\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetAllPostsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetAllPostsResult Result, GetAllPostsResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetAllPostsResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetAllPostsResult, GetAllPostsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allPostsId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                allPostsId = UpdateIGetAllPosts_AllPostsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"allPosts\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetAllPostsResultInfo(allPostsId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetAllPosts_AllPostsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var posts = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                posts.Add(UpdateIGetAllPosts_AllPostsEntity(session, child, entityIds));\r\n            }\r\n\r\n            return posts;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId? UpdateIGetAllPosts_AllPostsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"Post\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Forum4Server.State.PostEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Forum4Server.State.PostEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"content\")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"createdDateTime\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"userId\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Forum4Server.State.PostEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"title\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"content\")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"createdDateTime\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"userId\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n\r\n        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _dateTimeParser.Parse(obj.Value.GetString()!);\r\n        }\r\n\r\n        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllCommentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllCommentsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllCommentsResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        public GetAllCommentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllCommentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>(\"DateTime\") ?? throw new global::System.ArgumentException(\"No serializer for type `DateTime` found.\");\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetAllCommentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetAllCommentsResult Result, GetAllCommentsResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetAllCommentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetAllCommentsResult, GetAllCommentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allCommentsId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                allCommentsId = UpdateIGetAllComments_AllCommentsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"allComments\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetAllCommentsResultInfo(allCommentsId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetAllComments_AllCommentsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var comments = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                comments.Add(UpdateIGetAllComments_AllCommentsEntity(session, child, entityIds));\r\n            }\r\n\r\n            return comments;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId? UpdateIGetAllComments_AllCommentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"Comment\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Forum4Server.State.CommentEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Forum4Server.State.CommentEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"message\")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"createdDateTime\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"userId\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"postId\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Forum4Server.State.CommentEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"message\")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"createdDateTime\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"userId\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"postId\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n\r\n        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _dateTimeParser.Parse(obj.Value.GetString()!);\r\n        }\r\n\r\n        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class GetAllUsersBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllUsersResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllUsersResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        public GetAllUsersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllUsersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetAllUsersResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetAllUsersResult Result, GetAllUsersResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (response.Body != null && response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                {\r\n                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                }\r\n                else\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetAllUsersResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetAllUsersResult, GetAllUsersResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? allUsersId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                allUsersId = UpdateIGetAllUsers_AllUsersEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"allUsers\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetAllUsersResultInfo(allUsersId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetAllUsers_AllUsersEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var users = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                users.Add(UpdateIGetAllUsers_AllUsersEntity(session, child, entityIds));\r\n            }\r\n\r\n            return users;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId? UpdateIGetAllUsers_AllUsersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"User\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Forum4Server.State.UserEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Forum4Server.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"firstName\")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"lastName\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Forum4Server.State.UserEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"firstName\")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"lastName\")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _stringParser.Parse(obj.Value.GetString()!);\r\n        }\r\n\r\n        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class Forum4ClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer\r\n    {\r\n        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()\r\n        {Indented = false};\r\n        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            global::System.String __typename = obj.GetProperty(\"__typename\").GetString()!;\r\n            return __typename switch\r\n            {\r\n                \"Post\" => ParsePostEntityId(obj, __typename),\r\n                \"Comment\" => ParseCommentEntityId(obj, __typename),\r\n                \"User\" => ParseUserEntityId(obj, __typename),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        public global::System.String Format(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            return entityId.Name switch\r\n            {\r\n                \"Post\" => FormatPostEntityId(entityId),\r\n                \"Comment\" => FormatCommentEntityId(entityId),\r\n                \"User\" => FormatUserEntityId(entityId),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParsePostEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatPostEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatCommentEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetInt32()!);\r\n        }\r\n\r\n        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteNumber(\"id\", (global::System.Int32)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public partial class Forum4ClientStoreAccessor : global::StrawberryShake.StoreAccessor\r\n    {\r\n        public Forum4ClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.8.1.0\")]\r\n    public static partial class Forum4ClientServiceCollectionExtensions\r\n    {\r\n        public static global::StrawberryShake.IClientBuilder<global::Forum4Server.State.Forum4ClientStoreAccessor> AddForum4Client(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>\r\n            {\r\n                ConfigureClientDefault(sp, serviceCollection, strategy);\r\n                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Forum4Server.State.Forum4ClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.GetAllPostsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.GetAllCommentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.GetAllUsersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.Forum4Client>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.IForum4Client>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            return new global::StrawberryShake.ClientBuilder<global::Forum4Server.State.Forum4ClientStoreAccessor>(\"Forum4Client\", services, serviceCollection);\r\n        }\r\n\r\n        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>\r\n            {\r\n                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);\r\n                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient(\"Forum4Client\"));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Forum4Server.State.PostEntity, global::Forum4Server.GetAllPosts_AllPosts_Post>, global::Forum4Server.State.GetAllPosts_AllPosts_PostFromPostEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Forum4Server.State.CommentEntity, global::Forum4Server.GetAllComments_AllComments_Comment>, global::Forum4Server.State.GetAllComments_AllComments_CommentFromCommentEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Forum4Server.State.UserEntity, global::Forum4Server.GetAllUsers_AllUsers_User>, global::Forum4Server.State.GetAllUsers_AllUsers_UserFromUserEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllPostsResult>, global::Forum4Server.State.GetAllPostsResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllPostsResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.IGetAllPostsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllPostsResult>, global::Forum4Server.State.GetAllPostsBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Forum4Server.IGetAllPostsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllPostsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllPostsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.GetAllPostsQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.IGetAllPostsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.GetAllPostsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllCommentsResult>, global::Forum4Server.State.GetAllCommentsResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllCommentsResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.IGetAllCommentsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllCommentsResult>, global::Forum4Server.State.GetAllCommentsBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Forum4Server.IGetAllCommentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllCommentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllCommentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.GetAllCommentsQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.IGetAllCommentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.GetAllCommentsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllUsersResult>, global::Forum4Server.State.GetAllUsersResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Forum4Server.IGetAllUsersResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.IGetAllUsersQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllUsersResult>, global::Forum4Server.State.GetAllUsersBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Forum4Server.IGetAllUsersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllUsersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Forum4Server.IGetAllUsersResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.GetAllUsersQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.IGetAllUsersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.GetAllUsersQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Forum4Server.State.Forum4ClientEntityIdFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.Forum4Client>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Forum4Server.IForum4Client>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Forum4Server.Forum4Client>(sp));\r\n            return services;\r\n        }\r\n\r\n        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable\r\n        {\r\n            private readonly System.IServiceProvider _provider;\r\n            public ClientServiceProvider(System.IServiceProvider provider)\r\n            {\r\n                _provider = provider;\r\n            }\r\n\r\n            public object? GetService(System.Type serviceType)\r\n            {\r\n                return _provider.GetService(serviceType);\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n                if (_provider is System.IDisposable d)\r\n                {\r\n                    d.Dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","Kind":0,"Hash":null,"Path":null}]